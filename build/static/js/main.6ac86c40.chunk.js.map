{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["idSeq","Date","now","Control","memo","props","addTodo","inputRef","useRef","className","onSubmit","e","preventDefault","newText","current","value","trim","length","id","text","complete","type","placeholder","ref","TodoItem","todo","toggleTodo","removeTodo","onChange","checked","onClick","Todos","todos","map","key","TodoList","useState","setTodos","useCallback","filter","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6dAGA,IAAIA,EAAQC,KAAKC,MAEXC,EAASC,gBAAK,SAAiBC,GAAQ,IACpCC,EAAWD,EAAXC,QACDC,EAAWC,mBAcjB,OACE,yBAAKC,UAAU,WACb,qCAGA,0BAAMC,SAlBO,SAACC,GAChBA,EAAEC,iBACF,IAAMC,EAAWN,EAASO,QAAQC,MAAMC,OACnB,IAAjBH,EAAQI,SAGZX,EAAQ,CACNY,KAAKlB,EACLmB,KAAKN,EACLO,UAAS,IAEXb,EAASO,QAAQC,MAAQ,MAQrB,2BAAOM,KAAK,OAAOZ,UAAU,WAAWa,YAAY,wBAAwBC,IAAOhB,SAMrFiB,EAAWpB,gBAAK,SAAkBC,GAAQ,IACvCoB,EAA8BpB,EAA9BoB,KAAKC,EAAyBrB,EAAzBqB,WAAWC,EAActB,EAAdsB,WACjBT,EAAoBO,EAApBP,GAAGC,EAAiBM,EAAjBN,KAAKC,EAAYK,EAAZL,SASd,OACE,wBAAIX,UAAU,aACZ,2BAAOY,KAAK,WAAWO,SATZ,WACbF,EAAWR,IAQkCW,QAAST,IACpD,2BAAOX,UAAWW,EAAS,WAAW,IACnCD,GAEH,4BAAQW,QAVK,WACfH,EAAWT,KAST,YAOAa,EAAS3B,gBAAK,SAAeC,GAAO,IACjC2B,EAA+B3B,EAA/B2B,MAAMN,EAAyBrB,EAAzBqB,WAAWC,EAActB,EAAdsB,WACxB,OACE,4BAEIK,EAAMC,KAAI,SAAAR,GACR,OAAO,kBAAC,EAAD,CACLS,IAAKT,EAAKP,GACVO,KAAOA,EACPC,WAAYA,EACZC,WAAYA,WA2DTQ,MAlDf,WAAqB,IAAD,EACOC,mBAAS,IADhB,mBACXJ,EADW,KACLK,EADK,KAGZ/B,EAAUgC,uBAAY,SAACb,GAC3BY,GAAS,SAAAL,GAAK,4BAAMA,GAAN,CAAYP,SAC1B,IAEIE,EAAaW,uBAAY,SAACpB,GAC9BmB,GAAS,SAAAL,GAAK,OAAEA,EAAMO,QAAO,SAAAd,GAC3B,OAAOA,EAAKP,KAAMA,UAEpB,IAEIQ,EAAaY,uBAAY,SAACpB,GAC9BmB,GAAS,SAAAL,GAAK,OAAIA,EAAMC,KAAI,SAAAR,GAC1B,OAAOA,EAAKP,KAAMA,E,yVAAX,IAEEO,EAFF,CAGDL,UAAUK,EAAKL,WAEhBK,UAEP,IAiBF,OAdAe,qBAAU,WACR,IAAMR,EAAQS,KAAKC,MAAMC,aAAaC,QAAQ,UAAU,IACxDP,EAASL,KACT,IAEFQ,qBAAU,WACRG,aAAaE,QAAQ,QAASJ,KAAKK,UAAUd,MAC7C,CAACA,IAQD,yBAAKvB,UAAU,aACb,kBAAC,EAAD,CAAUH,QAASA,IACnB,kBAAC,EAAD,CAAOqB,WAAYA,EAAYD,WAAYA,EAAYM,MAAOA,MC1GhDe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6ac86c40.chunk.js","sourcesContent":["import React, {useEffect, useState,useMemo,memo,useCallback,useRef} from \"react\"\nimport \"./App.css\"\n\nlet idSeq = Date.now()\n\nconst Control= memo(function Control(props) {\n  const {addTodo} = props\n  const inputRef = useRef()\n  const onSubmit = (e)=>{\n    e.preventDefault()\n    const newText =  inputRef.current.value.trim()\n    if (newText.length===0) {\n      return\n    }\n    addTodo({\n      id:++idSeq,\n      text:newText,\n      complete:false\n    })\n    inputRef.current.value = ''\n  }\n  return (\n    <div className=\"control\">\n      <h1>\n        todos\n      </h1>\n      <form onSubmit={onSubmit} >\n        <input type=\"text\" className=\"new-todo\" placeholder=\"what need to be down?\" ref = {inputRef}/>\n      </form>\n    </div>\n  )\n})\n\nconst TodoItem = memo(function TodoItem(props) {\n  const {todo,toggleTodo,removeTodo} = props\n  const{id,text,complete} = todo\n\n  const onChange=()=>{\n    toggleTodo(id)\n  }\n  const onRemove = ()=>{\n    removeTodo(id)\n  }\n\n  return (\n    <li className=\"todo-item\">\n      <input type=\"checkbox\" onChange={onChange} checked={complete}/>\n      <label className={complete?'complete':''}>\n        {text}\n      </label>\n      <button onClick={onRemove}>&#xd7;</button>\n    </li>\n  )\n})\n\n\n\nconst Todos =  memo(function Todos(props){\n  const {todos,toggleTodo,removeTodo} = props\n  return (\n    <ul>\n      {\n        todos.map(todo=>{\n          return <TodoItem \n            key={todo.id}\n            todo ={todo}\n            toggleTodo={toggleTodo}\n            removeTodo={removeTodo}\n          />\n        })\n      }\n    </ul>\n  )\n})\n\n\nfunction TodoList() {\n  const [todos,setTodos] = useState([])\n\n  const addTodo = useCallback((todo)=>{\n    setTodos(todos=>[...todos,todo])\n  },[])\n\n  const removeTodo = useCallback((id)=>{\n    setTodos(todos=>todos.filter(todo=>{\n      return todo.id !==id\n    }))\n  },[])//\n  \n  const toggleTodo = useCallback((id)=>{\n    setTodos(todos => todos.map(todo=>{\n      return todo.id ===id\n          ?{\n            ...todo,\n            complete:!todo.complete,\n          }\n          :todo\n    }))\n  },[])\n\n\n  useEffect(()=>{\n    const todos = JSON.parse(localStorage.getItem(\"todos\")||[])\n    setTodos(todos)\n  },[])\n\n  useEffect(()=>{\n    localStorage.setItem(\"todos\", JSON.stringify(todos))\n  },[todos])  \n\n\n\n\n\n\n  return (\n    <div className=\"todo-list\">\n      <Control  addTodo={addTodo}/>\n      <Todos removeTodo={removeTodo} toggleTodo={toggleTodo} todos={todos}/>\n    </div>\n  )\n}\n\n\n\n\nexport default TodoList\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}